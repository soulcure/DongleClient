package swaiotos.channel.iot.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import swaiotos.channel.iot.db.bean.Device;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE".
*/
public class DeviceDao extends AbstractDao<Device, Long> {

    public static final String TABLENAME = "DEVICE";

    /**
     * Properties of entity Device.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ZpLsid = new Property(1, String.class, "zpLsid", false, "ZP_LSID");
        public final static Property ZpNickName = new Property(2, String.class, "zpNickName", false, "ZP_NICK_NAME");
        public final static Property ZpHeadSculpture = new Property(3, String.class, "zpHeadSculpture", false, "ZP_HEAD_SCULPTURE");
        public final static Property ZpRegisterId = new Property(4, String.class, "zpRegisterId", false, "ZP_REGISTER_ID");
        public final static Property ZpChip = new Property(5, String.class, "zpChip", false, "ZP_CHIP");
        public final static Property ZpModel = new Property(6, String.class, "zpModel", false, "ZP_MODEL");
        public final static Property DeviceName = new Property(7, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property ZpRegisterType = new Property(8, String.class, "zpRegisterType", false, "ZP_REGISTER_TYPE");
        public final static Property Simulring = new Property(9, String.class, "simulring", false, "SIMULRING");
        public final static Property FriendZpPosition = new Property(10, String.class, "friendZpPosition", false, "FRIEND_ZP_POSITION");
        public final static Property ZpDeviceJson = new Property(11, String.class, "zpDeviceJson", false, "ZP_DEVICE_JSON");
        public final static Property ZpAttributeJson = new Property(12, String.class, "zpAttributeJson", false, "ZP_ATTRIBUTE_JSON");
        public final static Property ZpStatus = new Property(13, int.class, "zpStatus", false, "ZP_STATUS");
        public final static Property IsTemp = new Property(14, int.class, "isTemp", false, "IS_TEMP");
        public final static Property RoomId = new Property(15, String.class, "roomId", false, "ROOM_ID");
        public final static Property MerchantName = new Property(16, String.class, "merchantName", false, "MERCHANT_NAME");
        public final static Property MerchantIcon = new Property(17, String.class, "merchantIcon", false, "MERCHANT_ICON");
        public final static Property MerchantCoverPhoto = new Property(18, String.class, "merchantCoverPhoto", false, "MERCHANT_COVER_PHOTO");
        public final static Property SpaceName = new Property(19, String.class, "spaceName", false, "SPACE_NAME");
        public final static Property MerchantId = new Property(20, String.class, "merchantId", false, "MERCHANT_ID");
        public final static Property SpaceId = new Property(21, String.class, "spaceId", false, "SPACE_ID");
    }


    public DeviceDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ZP_LSID\" TEXT UNIQUE ," + // 1: zpLsid
                "\"ZP_NICK_NAME\" TEXT," + // 2: zpNickName
                "\"ZP_HEAD_SCULPTURE\" TEXT," + // 3: zpHeadSculpture
                "\"ZP_REGISTER_ID\" TEXT," + // 4: zpRegisterId
                "\"ZP_CHIP\" TEXT," + // 5: zpChip
                "\"ZP_MODEL\" TEXT," + // 6: zpModel
                "\"DEVICE_NAME\" TEXT," + // 7: deviceName
                "\"ZP_REGISTER_TYPE\" TEXT," + // 8: zpRegisterType
                "\"SIMULRING\" TEXT," + // 9: simulring
                "\"FRIEND_ZP_POSITION\" TEXT," + // 10: friendZpPosition
                "\"ZP_DEVICE_JSON\" TEXT," + // 11: zpDeviceJson
                "\"ZP_ATTRIBUTE_JSON\" TEXT," + // 12: zpAttributeJson
                "\"ZP_STATUS\" INTEGER NOT NULL ," + // 13: zpStatus
                "\"IS_TEMP\" INTEGER NOT NULL ," + // 14: isTemp
                "\"ROOM_ID\" TEXT," + // 15: roomId
                "\"MERCHANT_NAME\" TEXT," + // 16: merchantName
                "\"MERCHANT_ICON\" TEXT," + // 17: merchantIcon
                "\"MERCHANT_COVER_PHOTO\" TEXT," + // 18: merchantCoverPhoto
                "\"SPACE_NAME\" TEXT," + // 19: spaceName
                "\"MERCHANT_ID\" TEXT," + // 20: merchantId
                "\"SPACE_ID\" TEXT);"); // 21: spaceId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Device entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String zpLsid = entity.getZpLsid();
        if (zpLsid != null) {
            stmt.bindString(2, zpLsid);
        }
 
        String zpNickName = entity.getZpNickName();
        if (zpNickName != null) {
            stmt.bindString(3, zpNickName);
        }
 
        String zpHeadSculpture = entity.getZpHeadSculpture();
        if (zpHeadSculpture != null) {
            stmt.bindString(4, zpHeadSculpture);
        }
 
        String zpRegisterId = entity.getZpRegisterId();
        if (zpRegisterId != null) {
            stmt.bindString(5, zpRegisterId);
        }
 
        String zpChip = entity.getZpChip();
        if (zpChip != null) {
            stmt.bindString(6, zpChip);
        }
 
        String zpModel = entity.getZpModel();
        if (zpModel != null) {
            stmt.bindString(7, zpModel);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(8, deviceName);
        }
 
        String zpRegisterType = entity.getZpRegisterType();
        if (zpRegisterType != null) {
            stmt.bindString(9, zpRegisterType);
        }
 
        String simulring = entity.getSimulring();
        if (simulring != null) {
            stmt.bindString(10, simulring);
        }
 
        String friendZpPosition = entity.getFriendZpPosition();
        if (friendZpPosition != null) {
            stmt.bindString(11, friendZpPosition);
        }
 
        String zpDeviceJson = entity.getZpDeviceJson();
        if (zpDeviceJson != null) {
            stmt.bindString(12, zpDeviceJson);
        }
 
        String zpAttributeJson = entity.getZpAttributeJson();
        if (zpAttributeJson != null) {
            stmt.bindString(13, zpAttributeJson);
        }
        stmt.bindLong(14, entity.getZpStatus());
        stmt.bindLong(15, entity.getIsTemp());
 
        String roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindString(16, roomId);
        }
 
        String merchantName = entity.getMerchantName();
        if (merchantName != null) {
            stmt.bindString(17, merchantName);
        }
 
        String merchantIcon = entity.getMerchantIcon();
        if (merchantIcon != null) {
            stmt.bindString(18, merchantIcon);
        }
 
        String merchantCoverPhoto = entity.getMerchantCoverPhoto();
        if (merchantCoverPhoto != null) {
            stmt.bindString(19, merchantCoverPhoto);
        }
 
        String spaceName = entity.getSpaceName();
        if (spaceName != null) {
            stmt.bindString(20, spaceName);
        }
 
        String merchantId = entity.getMerchantId();
        if (merchantId != null) {
            stmt.bindString(21, merchantId);
        }
 
        String spaceId = entity.getSpaceId();
        if (spaceId != null) {
            stmt.bindString(22, spaceId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Device entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String zpLsid = entity.getZpLsid();
        if (zpLsid != null) {
            stmt.bindString(2, zpLsid);
        }
 
        String zpNickName = entity.getZpNickName();
        if (zpNickName != null) {
            stmt.bindString(3, zpNickName);
        }
 
        String zpHeadSculpture = entity.getZpHeadSculpture();
        if (zpHeadSculpture != null) {
            stmt.bindString(4, zpHeadSculpture);
        }
 
        String zpRegisterId = entity.getZpRegisterId();
        if (zpRegisterId != null) {
            stmt.bindString(5, zpRegisterId);
        }
 
        String zpChip = entity.getZpChip();
        if (zpChip != null) {
            stmt.bindString(6, zpChip);
        }
 
        String zpModel = entity.getZpModel();
        if (zpModel != null) {
            stmt.bindString(7, zpModel);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(8, deviceName);
        }
 
        String zpRegisterType = entity.getZpRegisterType();
        if (zpRegisterType != null) {
            stmt.bindString(9, zpRegisterType);
        }
 
        String simulring = entity.getSimulring();
        if (simulring != null) {
            stmt.bindString(10, simulring);
        }
 
        String friendZpPosition = entity.getFriendZpPosition();
        if (friendZpPosition != null) {
            stmt.bindString(11, friendZpPosition);
        }
 
        String zpDeviceJson = entity.getZpDeviceJson();
        if (zpDeviceJson != null) {
            stmt.bindString(12, zpDeviceJson);
        }
 
        String zpAttributeJson = entity.getZpAttributeJson();
        if (zpAttributeJson != null) {
            stmt.bindString(13, zpAttributeJson);
        }
        stmt.bindLong(14, entity.getZpStatus());
        stmt.bindLong(15, entity.getIsTemp());
 
        String roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindString(16, roomId);
        }
 
        String merchantName = entity.getMerchantName();
        if (merchantName != null) {
            stmt.bindString(17, merchantName);
        }
 
        String merchantIcon = entity.getMerchantIcon();
        if (merchantIcon != null) {
            stmt.bindString(18, merchantIcon);
        }
 
        String merchantCoverPhoto = entity.getMerchantCoverPhoto();
        if (merchantCoverPhoto != null) {
            stmt.bindString(19, merchantCoverPhoto);
        }
 
        String spaceName = entity.getSpaceName();
        if (spaceName != null) {
            stmt.bindString(20, spaceName);
        }
 
        String merchantId = entity.getMerchantId();
        if (merchantId != null) {
            stmt.bindString(21, merchantId);
        }
 
        String spaceId = entity.getSpaceId();
        if (spaceId != null) {
            stmt.bindString(22, spaceId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Device readEntity(Cursor cursor, int offset) {
        Device entity = new Device( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // zpLsid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // zpNickName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // zpHeadSculpture
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // zpRegisterId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // zpChip
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // zpModel
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // deviceName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // zpRegisterType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // simulring
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // friendZpPosition
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // zpDeviceJson
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // zpAttributeJson
            cursor.getInt(offset + 13), // zpStatus
            cursor.getInt(offset + 14), // isTemp
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // roomId
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // merchantName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // merchantIcon
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // merchantCoverPhoto
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // spaceName
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // merchantId
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // spaceId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Device entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setZpLsid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setZpNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setZpHeadSculpture(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setZpRegisterId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setZpChip(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setZpModel(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDeviceName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setZpRegisterType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSimulring(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFriendZpPosition(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setZpDeviceJson(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setZpAttributeJson(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setZpStatus(cursor.getInt(offset + 13));
        entity.setIsTemp(cursor.getInt(offset + 14));
        entity.setRoomId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMerchantName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setMerchantIcon(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setMerchantCoverPhoto(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setSpaceName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setMerchantId(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setSpaceId(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Device entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Device entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Device entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
